name: Build & Package Marvell AQC107 2.5.12 Driver

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      dsm_ver_full:
        description: "完整 DSM build number"
        required: false
        default: "7.2.2-72806-3"
        type: string
      device_list:
        description: "機型清單 (逗號分隔)"
        required: false
        default: "ds1821plus"
        type: string
      cpu_series_list:
        description: "CPU系列清單 (逗號分隔)"
        required: false
        default: "v1000"
        type: string
      arch_list:
        description: "架構清單 (逗號分隔)"
        required: false
        default: "x86_64"
        type: string

env:
  PKG_NAME: "atlantic"
  PKG_VERSION: "2.5.12"
  PKG_SOURCE_URL: "https://www.marvell.com/content/dam/marvell/en/drivers/07-18-24_Marvell_Linux_2.5.12.zip"
  PKG_SOURCE_TARGET_FILE: "atlantic.tar.gz"
  NAS_CPU_LIST_URL: "https://kb.synology.com/en-global/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have"
  BASE_URL: "https://global.synologydownload.com/download"
  BASE_TC_URL: "https://global.synologydownload.com/download/ToolChain"
  ARCHIVE_URL: "https://archive.synology.com/download"
  ARCHIVE_TC_URL: "https://archive.synology.com/download/ToolChain"
  ARCHIVE_OS_URL: "https://archive.synology.com/download/Os/DSM"
  SPKSRC_REPO: "https://github.com/SynoCommunity/spksrc.git"
  # 資源網址 250611 更新
  # https://archive.synology.com/download/ToolChain/Synology%20NAS%20GPL%20Source/7.2-72806
  # https://archive.synology.com/download/ToolChain/toolchain/7.2-72806
  # https://www.marvell.com/support/downloads.html

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq        # jq 必要
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate matrix
        id: gen
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            printf 'matrix=%s\n' '[{"device":"ds1821plus","cpu_series":"v1000","arch":"x86_64"}]' >> "$GITHUB_OUTPUT"
          else
          # 解析輸入（逗號分隔）
            IFS=',' read -ra DEVICES <<< "${{ inputs.device_list }}"
            IFS=',' read -ra CPUS   <<< "${{ inputs.cpu_series_list }}"
            IFS=',' read -ra ARCHS  <<< "${{ inputs.arch_list }}"

            # zip 三條陣列 → 物件陣列
            jq -n --argjson d "$(printf '%s\n' "${DEVICES[@]}" | jq -R . | jq -s .)" \
                  --argjson c "$(printf '%s\n' "${CPUS[@]}"   | jq -R . | jq -s .)" \
                  --argjson a "$(printf '%s\n' "${ARCHS[@]}"  | jq -R . | jq -s .)" '
              [ range(0; ($d|length)) | {
                  device:   $d[.],
                  cpu_series:$c[.],
                  arch:     $a[.]
                } ]' > matrix.json
            json=$(jq -c . matrix.json)
            printf 'matrix=%s\n' "$json" >> "$GITHUB_OUTPUT"
          fi
          printf 'dsm_ver_full=%s\n' "${{ inputs.dsm_ver_full || '7.2.2-72806-3' }}" >> "$GITHUB_OUTPUT"
    outputs:
      matrix: ${{ steps.gen.outputs.matrix }}
      dsm_ver_full: ${{ steps.gen.outputs.dsm_ver_full }}

  build:
    runs-on: ubuntu-latest
    needs: init
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.init.outputs.matrix) }}
    name: Build - ${{ matrix.device }}
    env:
      DEVICE: ${{ matrix.device }}
      CPU_SERIES: ${{ matrix.cpu_series }}
      ARCH: ${{ matrix.arch }}
      DSM_VER_FULL: ${{ needs.init.outputs.dsm_ver_full }}
      DRIVER_DIR: ${{ github.workspace }}/driver-${{ matrix.device }}
    steps:
      # —————————— 準備 ——————————
      - name: Initialize Folder
        run: |
          # ————— 建立目錄 —————
          mkdir -p "${DRIVER_DIR}"
          mkdir -p "${DRIVER_DIR}/${PKG_NAME}"

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y xz-utils bc build-essential wget unzip git

      - name: Get NAS specific information
        run: |
          set -ex

          # 1) plus 回復原始 + (ds1821plus → ds1821+ / rs2423rpplus → rs2423rp+)
          MODEL="$(echo "$DEVICE" | sed 's/plus$/+/')"

          # 2) 驗證 MODEL 與 CPU_SERIES (已移除，因為網頁格式可能已改變)
          # CPU_SERIES_FIND=$(curl -s "$NAS_CPU_LIST_URL" \
          #   | grep -ioP "<td[^>]*>${MODEL//+/\\+}</td>.*?<td[^>]*>\\K[^<]+" \
          #   | head -1)
          # if [ -n "$CPU_SERIES_FIND" ] && [ "$CPU_SERIES_FIND" != "$CPU_SERIES" ]; then
          #   echo "Warning: CPU_SERIES for '$MODEL' 應為 '$CPU_SERIES_FIND'"
          #   CPU_SERIES="$CPU_SERIES_FIND"
          #   echo "CPU_SERIES=$CPU_SERIES" >> "$GITHUB_ENV"
          # fi
          # CPU_SERIES_FINDED=$(wget -qO- "$NAS_CPU_LIST_URL" \
          #   | grep -i -A1 -e "<td>$MODEL</td>" \
          #   | tail -1 \
          #   | sed 's/.*<td>\(.*\)<\/td>.*/\1/')
          # if [ -z "$CPU_SERIES_FINDED" ]; then
          #   echo "Error: Could not find CPU_SERIES for '$MODEL'. Please check the input or device in build_json."
          #   echo "::warning::CPU_SERIES for $MODEL not found, skip validation"
          # fi
          # if !$CPU_SERIES_FINDED && [ "$CPU_SERIES_FINDED" != "$CPU_SERIES" ]; then
          #   echo "Warning: CPU_SERIES for '$MODEL' should be '$CPU_SERIES_FINDED'. Please check the input or device in build_json."
          #   CPU_SERIES=${CPU_SERIES_FINDED}
          #   echo "CPU_SERIES=$CPU_SERIES" >> $GITHUB_ENV
          # fi

          # 3) 繼續宣告 機型 別名
          # ds1821+ → ds
          MODEL_SERIES="$(echo "${MODEL}" | sed 's/^\([a-z][a-z]\).*/\1/')"
          # ds1821+ → 1821+
          MODEL_SUB="$(echo "${MODEL}" | sed 's/^[a-z][a-z]//')"
          # ds1821+ → DS1821+ / ds416play → DS416play
          MODEL_UPPER="$(echo "${MODEL_SERIES}" | tr '[:lower:]' '[:upper:]')${MODEL_SUB}"
          echo "MODEL=${MODEL}" >> $GITHUB_ENV

          # 4) 驗證 DSM_VER_FULL (https://archive.synology.com/download/Os/DSM)
          OS_INDEX=$(curl -fsSL "$ARCHIVE_OS_URL")
          if ! grep -Fq "$DSM_VER_FULL" <<< "$OS_INDEX"; then
            echo "Error: ${DSM_VER_FULL} is not exist. Will use latest version."
            # DSM_VER_FULL=$(echo "$OS_INDEX" | grep -oE "[6-9]\.[0-9](\.[0-9])?-[0-9]+(-[0-9]+)?" | head -n1)
            DSM_VER_FULL=$(grep -oE '[6-9]\.[0-9](\.[0-9])?-[0-9]+(-[0-9]+)?' <<< "$OS_INDEX" | head -1)
            echo "DSM_VER_FULL=$DSM_VER_FULL" >> $GITHUB_ENV
          fi

          # 5) 計算 DSM 版本別名
          # Check DSM_VER_FULL is major version or minor version
          # 7.2.2-72806 is major version / 7.2.2-72806-3 is minor version
          IS_MAJOR_VER=false
          if [[ $(grep -o '-' <<< "$DSM_VER_FULL" | wc -l) -eq 2 ]]; then
            IS_MAJOR_VER=false
          else
            IS_MAJOR_VER=true
          fi
          IFS='-' read -r DSM_MAIN_VER DSM_VER DSM_PATCH_VER <<< "$DSM_VER_FULL"
          DSM_PATCH_VER=${DSM_PATCH_VER:-}      # 沒 patch 時給空
          if [ -z "$DSM_PATCH_VER" ]; then
            DSM_TAG="${DSM_MAIN_VER}-${DSM_VER}"   # 7.2-72806
          else
            DSM_TAG="${DSM_MAIN_VER%.*}-${DSM_VER}"  # 7.2-72806
          fi
          # if $IS_MAJOR_VER; then
          #   # 7.2.2-72806 = DSM_VER_FULL = DSM_MAIN_VER-DSM_VER
          #   # 7.2-72806 = DSM_VER_FULL_SHORT = DSM_MAIN_MAJOR_VER-DSM_VER
          #   DSM_MAIN_VER="${DSM_VER_FULL%-*}" # 7.2.2
          #   DSM_VER="${DSM_VER_FULL#*-}" # 72806
          #   DSM_VER_FULL_SHORT="${DSM_MAIN_VER}-${DSM_VER}" # 7.2-72806
          #   DSM_TAG="${DSM_VER_FULL_SHORT}" # 7.2-72806
          #   DSM_PATCH_VER=""
          # else
          #   # 7.2.2-72806-3 = DSM_VER_FULL = DSM_MAIN_VER-DSM_VER-DSM_PATCH_VER
          #   # 7.2-72806-3 = DSM_VER_FULL_SHORT = DSM_MAIN_MAJOR_VER-DSM_VER-DSM_PATCH_VER
          #   DSM_MAIN_VER="${DSM_VER_FULL%-*}" # 7.2.2
          #   DSM_VER="${DSM_VER_FULL#*-}" # 72806
          #   DSM_VER_FULL_SHORT="${DSM_MAIN_VER%.*}-${DSM_VER}-${DSM_PATCH_VER}" # 7.2-72806-3
          #   DSM_TAG="${DSM_VER_FULL%.*}-${DSM_VER}" # 7.2-72806
          #   DSM_PATCH_VER="${DSM_VER_FULL_SHORT##*-}"# 3
          # fi

          echo "DSM_TAG=${DSM_TAG}" >> $GITHUB_ENV

          # 6) 驗證 $ARCH (藉由 TOOLCHAIN_WEBFOLDER)
          TOOLCHAIN_WEBFOLDER="${ARCHIVE_TC_URL}/toolchain/${DSM_TAG}"

          # 7) 檢查目錄是否存在？
          if ! curl -fsI "$TOOLCHAIN_WEBFOLDER/" >/dev/null ; then
            echo "::warning::$TOOLCHAIN_WEBFOLDER 不存在，跳過此機種"
            exit 1
          fi

          TOOLCHAIN_WEBFOLDER_CONTENT=$(curl -sL "${TOOLCHAIN_WEBFOLDER}/")
          # TOOLCHAIN_FILE_NAME=$(echo "$TOOLCHAIN_WEBFOLDER_CONTENT" |
          #                     grep -oE "${CPU_SERIES}-gcc[0-9_]+_[^_]+_(x86_64|armv8|armv7)-GPL.txz" |
          #                     head -n1)
          TOOLCHAIN_FILE_NAME=$(echo "$TOOLCHAIN_WEBFOLDER_CONTENT" |
                                grep -oE "${CPU_SERIES}-gcc[0-9_]+_[^_]+_(x86_64|armv8|armv7)-GPL.txz" |
                                head -n1)
          echo "CPU_SERIES: $CPU_SERIES"
          echo "TOOLCHAIN_WEBFOLDER_CONTENT preview:"
          echo "$TOOLCHAIN_WEBFOLDER_CONTENT" | head -20
          echo "TOOLCHAIN_FILE_NAME: $TOOLCHAIN_FILE_NAME"

          if [ -z "$TOOLCHAIN_FILE_NAME" ]; then
            echo "::warning::找不到 $CPU_SERIES 的 toolchain 於 $DSM_TAG，跳過此機種"
            exit 1
          fi

          # ARCH_FINDED=$(echo "$TOOLCHAIN_FILE_NAME" | sed -E 's/.*_([^_]+)-GPL.txz/\1/')
          # echo "$CPU_SERIES → ARCH FINDED: $ARCH_FINDED"
          # ---------- ARCH_FINDED ----------
          ARCH_FINDED=$(echo "$TOOLCHAIN_FILE_NAME" | sed -E 's/.*_([^-]+)-GPL.txz/\1/')
          echo "Toolchain filename: $TOOLCHAIN_FILE_NAME"
          echo "Extracted ARCH: $ARCH_FINDED"

          if [ -z "$ARCH_FINDED" ]; then
            echo "::error::無法由檔名解析架構，檔名=$TOOLCHAIN_FILE_NAME"
            exit 1
          fi

          if [ "$ARCH_FINDED" != "$ARCH" ]; then
            echo "Warning: ARCH for '$MODEL' should be '$ARCH_FINDED'. Please check the input or device in build_json."
            ARCH=${ARCH_FINDED}
            echo "ARCH=$ARCH" >> $GITHUB_ENV
          fi

          # 將 ARCH 轉換為 kernel 預期的格式
          case "$ARCH" in
            x86_64)
              KERNEL_ARCH="x86"
              ;;
            armv8)
              KERNEL_ARCH="arm64"
              ;;
            armv7)
              KERNEL_ARCH="arm"
              ;;
            *)
              KERNEL_ARCH="$ARCH"
              ;;
          esac
          echo "Original ARCH: $ARCH, Kernel ARCH: $KERNEL_ARCH"
          echo "KERNEL_ARCH=$KERNEL_ARCH" >> $GITHUB_ENV
          # 8) 取下載網址方便之後下載
          # TOOLCHAIN_URL=$(echo "$TOOLCHAIN_WEBFOLDER_CONTENT" | grep -B2 "${TOOLCHAIN_FILE_NAME}" | grep -oP '<a href="\K[^"]+' | head -n1)

          TOOLCHAIN_URL=$(echo "$TOOLCHAIN_WEBFOLDER_CONTENT" \
                  | grep -B2 "$TOOLCHAIN_FILE_NAME" \
                  | grep -oP '<a href="\K[^"]+' \
                  | head -n1)
          if [ -z "$TOOLCHAIN_URL" ]; then
            echo "::warning::抓不到下載網址，跳過 $MODEL"
            exit 1
          fi
          echo "TOOLCHAIN_URL=$TOOLCHAIN_URL" >> "$GITHUB_ENV"

          # 9) 取 Kernel 版本
          # TOOLCHAIN_URL = https://global.synologydownload.com/download/ToolChain/toolchain/7.2-72806/Intel%20x86%20Linux%204.4.302%20%28V1000%29/v1000-gcc1220_glibc236_x86_64-GPL.txz
          # KERNEL_VER=$(echo "$TOOLCHAIN_URL" | sed -E 's/.*Linux%20([^%]+)%20.*/\1/')
          KERNEL_VER=$(echo "$TOOLCHAIN_URL" | sed -E 's/.*Linux%20([^%]+)%20.*/\1/')
          if [ -z "$KERNEL_VER" ]; then
            echo "::error::抓不到 Kernel 版本，TOOLCHAIN_URL=$TOOLCHAIN_URL"
            exit 1
          fi
          echo "KERNEL_VER=$KERNEL_VER" >> $GITHUB_ENV

        continue-on-error: true

      - name: Extract Kernel version
        run: |
          # 宣告 KERNEL_VER_MAJOR 和 KERNEL_VER_SERIES (Extract 4 and 4.4 from 4.4.302)
          if [ -z "$KERNEL_VER" ]; then
            echo "::error::KERNEL_VER is not set, cannot extract kernel version"
            exit 1
          fi
          echo "KERNEL_VER_MAJOR=${KERNEL_VER%%.*}" >> $GITHUB_ENV
          echo "KERNEL_VER_SERIES=${KERNEL_VER%.*}" >> $GITHUB_ENV

      # —————————— 下載並解壓 ——————————
      - name: Download essential files from GitHub Repository
        run: |
          # 1) 設定 REPO_URL 並下載 aqc107.cfg
          MY_REPO_URL="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/main"
          curl -L -o aqc107.cfg ${MY_REPO_URL}/kernel-config-append/aqc107.cfg
          if [ ! -f "aqc107.cfg" ]; then
            echo "::error::Failed to download aqc107.cfg from repository"
            exit 1
          fi
          # 2) 宣告 REPO_URL
          echo "REPO_URL=${MY_REPO_URL}" >> $GITHUB_ENV

      - name: Synology 內核原始碼 Source (25/06/11)
        run: |
          # 下載並解壓
          if [ -z "$KERNEL_VER_SERIES" ]; then
            echo "::error::KERNEL_VER_SERIES is not set, cannot download kernel source"
            exit 1
          fi
          KERNEL_SRC_FILE="linux-${KERNEL_VER_SERIES}.x.txz"
          wget -O "$KERNEL_SRC_FILE" "${BASE_TC_URL}/Synology%20NAS%20GPL%20Source/${DSM_TAG}/${CPU_SERIES}/linux-${KERNEL_VER_SERIES}.x.txz"
          if [ ! -f "$KERNEL_SRC_FILE" ]; then
            echo "::error::Failed to download kernel source file"
            exit 1
          fi
          tar xJf "$KERNEL_SRC_FILE"

      - name: Synology 交叉編譯工具鏈 ToolChain (25/06/11)
        run: |
          # https://global.synologydownload.com/download/ToolChain/toolchain/7.2-72806/Intel%20x86%20Linux%204.4.302%20%28V1000%29/v1000-gcc1220_glibc236_x86_64-GPL.txz
          # 下載並解壓
          if [ -z "$TOOLCHAIN_URL" ]; then
            echo "::error::TOOLCHAIN_URL is not set, cannot download toolchain"
            exit 1
          fi
          wget -O toolchain.txz "${TOOLCHAIN_URL}"
          if [ ! -f "toolchain.txz" ]; then
            echo "::error::Failed to download toolchain file"
            exit 1
          fi
          tar xJf toolchain.txz

      - name: 驅動 Marvell AQC107 (25/06/11)
        run: |
          # 1) 下載並解壓
          if [ -z "$PKG_SOURCE_URL" ]; then
            echo "::error::PKG_SOURCE_URL is not set, cannot download driver"
            exit 1
          fi
          wget -q -O marvell.zip "${PKG_SOURCE_URL}"
          if [ ! -f "marvell.zip" ]; then
            echo "::error::Failed to download Marvell driver file"
            exit 1
          fi
          # 2) 只解出 atlantic.tar.gz
          PSTF_PATH=$(unzip -Z1 marvell.zip | grep -i -m1 -E "(^|/)${PKG_SOURCE_TARGET_FILE}$")
          unzip -j marvell.zip "${PSTF_PATH}"
          if [ ! -f "atlantic.tar.gz" ]; then
            echo "::error::Failed to extract atlantic.tar.gz from Marvell driver archive"
            exit 1
          fi
          # 3) 把 Linux/ 這一層 strip 掉
          tar -xzf atlantic.tar.gz \
              --strip-components=1 \
              -C "${DRIVER_DIR}/${PKG_NAME}"

      # —————————— 編譯 ——————————

      - name: 啟動 Synology 內核編譯功能
        run: |
          # 1) 宣告環境變數 TOOLCHAIN_DIR 和 CROSS_COMPILE
          echo "KERNEL_SRC=${PWD}/linux-${KERNEL_VER_SERIES}.x" >> $GITHUB_ENV
          echo "TOOLCHAIN_DIR=${PWD}/${ARCH}-pc-linux-gnu/" >> $GITHUB_ENV
          # CROSS_COMPILE_PATH="${PWD}/${ARCH}-pc-linux-gnu/bin/${ARCH}-pc-linux-gnu-"
          # echo "CROSS_COMPILE_ENV=${CROSS_COMPILE_PATH}" >> $GITHUB_ENV
          echo "CROSS_COMPILE=${PWD}/${ARCH}-pc-linux-gnu/bin/${ARCH}-pc-linux-gnu-" >> $GITHUB_ENV
          echo "${PWD}/${ARCH}-pc-linux-gnu/bin" >> $GITHUB_PATH     # gcc 放進 PATH

          # 2) 切換目錄
          cd linux-${KERNEL_VER_SERIES}.x

          # 3) 拷貝官方 synoconfigs 基礎 config
          cp synoconfigs/${CPU_SERIES} .config

          # 4) 用 merge_config.sh 合併你的 cfg
          scripts/kconfig/merge_config.sh .config ../aqc107.cfg
          yes "" | make oldconfig      # 自動答預設

          # 5) 修改 Makefile ( EXTRAVERSION = to EXTRAVERSION = + )
          sed -i "s/EXTRAVERSION = /EXTRAVERSION = +/g" Makefile

          # 6) 準備編譯
          export ARCH=${KERNEL_ARCH}
          echo "Building kernel with ARCH=${ARCH}"
          make clean
          # make -j$(nproc) CROSS_COMPILE=${CROSS_COMPILE_PATH} prepare
          # make -j$(nproc) CROSS_COMPILE=${CROSS_COMPILE_PATH} scripts
          make -j$(nproc) prepare
          make -j$(nproc) scripts

      - name: 編譯模組 AQC107
        run: |
          # 1) 切換目錄 
          cd ${DRIVER_DIR}/${PKG_NAME}/

          # 2) aq_compat.h 處理 page_ref_count
          FILE="${DRIVER_DIR}/${PKG_NAME}/aq_compat.h"
          if [ -f "$FILE" ]; then
            sed -i '/static inline int page_ref_count/,/^#endif/c #endif /* page_ref_count fallback removed */' "$FILE"
          else
            echo "::warning::aq_compat.h not found, skipping page_ref_count fix"
          fi

          # 3) 編譯
          if [ -z "$KERNEL_SRC" ]; then
            echo "::error::KERNEL_SRC is not set, cannot compile module"
            exit 1
          fi
          export ARCH=${KERNEL_ARCH}
          echo "Compiling module with ARCH=${ARCH}"
          make -j$(nproc) CROSS_COMPILE=${CROSS_COMPILE} -C ${KERNEL_SRC} M=$PWD modules

      - name: 上傳 .ko 模組為 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}-${{ env.PKG_VERSION }}-ko
          path: ${{ env.DRIVER_DIR }}/${{ env.PKG_NAME }}/*.ko
          if-no-files-found: error

      # —————————— 開始打包成 SPK ——————————
      - name: Clone spksrc 框架
        run: |
          # git clone --depth 1 ${SPKSRC_REPO} spksrc
          git clone --branch master --single-branch ${SPKSRC_REPO} spksrc

      - name: 建立 SPK 骨架 and 複製 .ko
        run: |
          # 1) 切換目錄
          cd spksrc

          # 編好的 atlantic.ko 已在 $DRIVER_DIR/atlantic/atlantic.ko
          # 會放進 lib/modules/$KERNEL_VER/
          # 2) 建立 driver 套件骨架（spk/atlantic）
          # ./mk/spksrc.create.sh driver/atlantic
          bash ./mk/spksrc.create.sh driver/atlantic

          # 3) 建立模組目的資料夾並複製
          if [ -z "$KERNEL_VER" ]; then
            echo "::error::KERNEL_VER is not set, cannot copy kernel module"
            exit 1
          fi
          install -D \
            "${DRIVER_DIR}/${PKG_NAME}/atlantic.ko" \
            "spk/atlantic/files/lib/modules/${KERNEL_VER}/atlantic.ko"

          # 4) 更新版本號
          sed -i "s/^PKG_VERS.*/PKG_VERS = ${PKG_VERSION}/" spk/atlantic/Makefile
          # 或模板是 VERSION 的話請改成：sed -i 's/^VERSION.*/VERSION = .../'

      - name: 下載工具鏈 (一次性節省後續 cache)
        run: |
          cd spksrc
          make setup

      - name: 建置 .spk
        run: |
          # 1) 切換目錄
          cd spksrc
          # 2) TCVERSION - DSM 主版號 7.x, arch - CPU 架構
          TCVERSION=${DSM_TAG%-*}
          make TCVERSION=${TCVERSION} arch-${ARCH} package-${PKG_NAME}

      - name: 上傳產出的 .spk
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.PKG_NAME }}-${{ env.PKG_VERSION }}.spk"
          path: "spksrc/output/${{ env.ARCH }}/${{ env.PKG_NAME }}-${{ env.PKG_VERSION }}-${{ env.ARCH }}.spk"
